// Generated by gencpp from file actionlib_tutorials/MoveToGoal.msg
// DO NOT EDIT!


#ifndef ACTIONLIB_TUTORIALS_MESSAGE_MOVETOGOAL_H
#define ACTIONLIB_TUTORIALS_MESSAGE_MOVETOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace actionlib_tutorials
{
template <class ContainerAllocator>
struct MoveToGoal_
{
  typedef MoveToGoal_<ContainerAllocator> Type;

  MoveToGoal_()
    : point()
    , id(0)  {
    }
  MoveToGoal_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef uint32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveToGoal_

typedef ::actionlib_tutorials::MoveToGoal_<std::allocator<void> > MoveToGoal;

typedef boost::shared_ptr< ::actionlib_tutorials::MoveToGoal > MoveToGoalPtr;
typedef boost::shared_ptr< ::actionlib_tutorials::MoveToGoal const> MoveToGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator1> & lhs, const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator1> & lhs, const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actionlib_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6efe66e6c95aef59612cca501d13269e";
  }

  static const char* value(const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6efe66e6c95aef59ULL;
  static const uint64_t static_value2 = 0x612cca501d13269eULL;
};

template<class ContainerAllocator>
struct DataType< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actionlib_tutorials/MoveToGoal";
  }

  static const char* value(const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# This is an action definition file, which has three parts: the goal\n"
"# the result, and the feedback.\n"
"# Part 1: the goal.\n"
"#\n"
"#Where to go\n"
"geometry_msgs/Point point\n"
"#The drone's id\n"
"uint32 id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveToGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actionlib_tutorials::MoveToGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actionlib_tutorials::MoveToGoal_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTIONLIB_TUTORIALS_MESSAGE_MOVETOGOAL_H
