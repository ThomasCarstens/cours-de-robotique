# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from fkie_multimaster_msgs.grpc import launch_pb2 as fkie__multimaster__msgs_dot_grpc_dot_launch__pb2


class LaunchServiceStub(object):
    """The launch manager service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLoadedFiles = channel.unary_stream(
                '/fkie_multimaster_msgs.launch.LaunchService/GetLoadedFiles',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadedFile.FromString,
                )
        self.LoadLaunch = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/LoadLaunch',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchRequest.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
                )
        self.ReloadLaunch = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/ReloadLaunch',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
                )
        self.UnloadLaunch = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/UnloadLaunch',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
                )
        self.GetNodes = channel.unary_stream(
                '/fkie_multimaster_msgs.launch.LaunchService/GetNodes',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.ListNodesRequest.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchContent.FromString,
                )
        self.StartNode = channel.stream_stream(
                '/fkie_multimaster_msgs.launch.LaunchService/StartNode',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.FromString,
                )
        self.StartStandaloneNode = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/StartStandaloneNode',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartConfig.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.FromString,
                )
        self.GetIncludedFiles = channel.unary_stream(
                '/fkie_multimaster_msgs.launch.LaunchService/GetIncludedFiles',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesRequest.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesReply.FromString,
                )
        self.InterpretPath = channel.unary_stream(
                '/fkie_multimaster_msgs.launch.LaunchService/InterpretPath',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpretPaths.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpredPath.FromString,
                )
        self.GetMtime = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/GetMtime',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeReply.FromString,
                )
        self.GetChangedBinaries = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/GetChangedBinaries',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Nodes.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeNodes.FromString,
                )
        self.GetStartCfg = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/GetStartCfg',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartCfgReply.FromString,
                )
        self.ResetPackageCache = channel.unary_unary(
                '/fkie_multimaster_msgs.launch.LaunchService/ResetPackageCache',
                request_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.SerializeToString,
                response_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.FromString,
                )


class LaunchServiceServicer(object):
    """The launch manager service definition.
    """

    def GetLoadedFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartNode(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartStandaloneNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIncludedFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterpretPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMtime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChangedBinaries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStartCfg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPackageCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLoadedFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.GetLoadedFiles,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadedFile.SerializeToString,
            ),
            'LoadLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadLaunch,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchRequest.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.SerializeToString,
            ),
            'ReloadLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadLaunch,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.SerializeToString,
            ),
            'UnloadLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadLaunch,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.SerializeToString,
            ),
            'GetNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetNodes,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.ListNodesRequest.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchContent.SerializeToString,
            ),
            'StartNode': grpc.stream_stream_rpc_method_handler(
                    servicer.StartNode,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.SerializeToString,
            ),
            'StartStandaloneNode': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStandaloneNode,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartConfig.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.SerializeToString,
            ),
            'GetIncludedFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.GetIncludedFiles,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesRequest.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesReply.SerializeToString,
            ),
            'InterpretPath': grpc.unary_stream_rpc_method_handler(
                    servicer.InterpretPath,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpretPaths.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpredPath.SerializeToString,
            ),
            'GetMtime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMtime,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeReply.SerializeToString,
            ),
            'GetChangedBinaries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChangedBinaries,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Nodes.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeNodes.SerializeToString,
            ),
            'GetStartCfg': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStartCfg,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartCfgReply.SerializeToString,
            ),
            'ResetPackageCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPackageCache,
                    request_deserializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.FromString,
                    response_serializer=fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fkie_multimaster_msgs.launch.LaunchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LaunchService(object):
    """The launch manager service definition.
    """

    @staticmethod
    def GetLoadedFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetLoadedFiles',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadedFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/LoadLaunch',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchRequest.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReloadLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/ReloadLaunch',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnloadLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/UnloadLaunch',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LoadLaunchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetNodes',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.ListNodesRequest.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchContent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartNode(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/fkie_multimaster_msgs.launch.LaunchService/StartNode',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartStandaloneNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/StartStandaloneNode',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartConfig.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIncludedFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetIncludedFiles',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesRequest.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.IncludedFilesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InterpretPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fkie_multimaster_msgs.launch.LaunchService/InterpretPath',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpretPaths.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.InterpredPath.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMtime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetMtime',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.LaunchFile.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChangedBinaries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetChangedBinaries',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Nodes.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.MtimeNodes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStartCfg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/GetStartCfg',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Node.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.StartCfgReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPackageCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fkie_multimaster_msgs.launch.LaunchService/ResetPackageCache',
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.SerializeToString,
            fkie__multimaster__msgs_dot_grpc_dot_launch__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
